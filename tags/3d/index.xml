<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3d on vladkvit.github.io</title>
    <link>http://localhost:1313/tags/3d/</link>
    <description>Recent content in 3d on vladkvit.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/3d/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>BMW E24 6-series Model</title>
      <link>http://localhost:1313/artistic/e24/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/artistic/e24/</guid>
      <description>&lt;p&gt;This is my second serious car modelling project. The reference photos were harder to find, and the blueprints were quite approximate. With the first car, I&amp;rsquo;ve learned about how not to model, so this one&amp;rsquo;s all polys and good topology.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BMW M5 Model</title>
      <link>http://localhost:1313/artistic/m5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/artistic/m5/</guid>
      <description>&lt;p&gt;This is a side project that I started back in first year of university. It&amp;rsquo;s my first &amp;ldquo;real&amp;rdquo; 3D modelling work. I got reference photos and approximate blueprints for an E60 (&amp;lsquo;05-&amp;lsquo;10) and did the model from them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CS488 Final Project</title>
      <link>http://localhost:1313/programming/cs488finalproj/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/programming/cs488finalproj/</guid>
      <description>&lt;p&gt;This is my final project for the CS488 Graphics course. It has OpenGL rendering a few cubes with specular+diffuse shading and parallax mapping. Originally, the idea was to get a simulated windowing environment, but there&#39;s never enough time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Doodles</title>
      <link>http://localhost:1313/artistic/doodles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/artistic/doodles/</guid>
      <description>&lt;p&gt;Doodles&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rasterization with Perspective-correct Texturing</title>
      <link>http://localhost:1313/programming/rasterizationmatlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/programming/rasterizationmatlab/</guid>
      <description>&lt;p&gt;A friend of mine wrote a simple 2.5D texture renderer using an algorithm from the Doom &amp; Quake era. I whipped up a Matlab script to see how much difference would a &#34;correct&#34; algoritm make.&lt;/p&gt;
&lt;p&gt;The script takes in any 4 verteces and renders the texture over them with a wide (90*) FOV.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raytracer</title>
      <link>http://localhost:1313/programming/raytracer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/programming/raytracer/</guid>
      <description>&lt;p&gt;I wrote my raytracer as a part of my &lt;a href=&#34;https://www.student.cs.uwaterloo.ca/~cs488/&#34;&gt;CS488&lt;/a&gt; Graphics course.
It&amp;rsquo;s pretty straight-forward: single-threaded, non-AA non-accelerated raytracer. It renders polygons and spheres.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Software Rasterization</title>
      <link>http://localhost:1313/programming/rasterization2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/programming/rasterization2/</guid>
      <description>&lt;p&gt;As a part of my CS488 Graphics course, I wrote a software implementation of edge rasterization. Features a full projection matrix, screen clipping, frustum culling, etc + object transformation. The 2 RGB gnomons represent the model-space and world-space. A line drawing API was given.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tetris</title>
      <link>http://localhost:1313/programming/tetris/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/programming/tetris/</guid>
      <description>&lt;p&gt;I wrote a functional 3D-rendered Tetris game as a part of my CS488 Graphics course. The game is still &#34;flat&#34;, it&#39;s just rendered using cubes in OpenGL. Most of the game logic was provided.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Videos</title>
      <link>http://localhost:1313/artistic/videos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/artistic/videos/</guid>
      <description>&lt;p&gt;A collection of 3D &amp;amp; VFX videos.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>